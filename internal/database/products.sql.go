// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id ,  name, description ,price,stock,category_id,image_url,is_active, created_at , updated_at) 
VALUES ($1,$2,$3,$4 ,$5 ,$6,$7,$8 ,$9 ,$10)

RETURNING id, name, description, price, stock, category_id, image_url, is_active, created_at, updated_at
`

type CreateProductParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Price       string
	Stock       int32
	CategoryID  uuid.UUID
	ImageUrl    sql.NullString
	IsActive    sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.ImageUrl,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.ImageUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductByProductId = `-- name: DeleteProductByProductId :exec
DELETE FROM products WHERE id = $1
`

// -- name: UpdateProductData:one
// UPDATE products SET password = $1 WHERE id = $2
// RETURNING *;
func (q *Queries) DeleteProductByProductId(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductByProductId, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, description, price, stock, category_id, image_url, is_active, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.ImageUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, description, price, stock, category_id, image_url, is_active, created_at, updated_at FROM products WHERE name = $1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.ImageUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
