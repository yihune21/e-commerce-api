// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admins.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (id ,  name, email ,password, created_at , updated_at) 
VALUES ($1,$2,$3,$4 ,$5 ,$6)

RETURNING id, name, email, password, created_at, updated_at
`

type CreateAdminParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM admins WHERE email = $1
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT id, name, email, password, created_at, updated_at FROM admins WHERE id = $1
`

func (q *Queries) GetAdminById(ctx context.Context, id uuid.UUID) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminById, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminPasword = `-- name: UpdateAdminPasword :one
UPDATE users SET password = $1 WHERE id = $2
RETURNING id, name, email, password, created_at, updated_at
`

type UpdateAdminPaswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdateAdminPasword(ctx context.Context, arg UpdateAdminPaswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAdminPasword, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
