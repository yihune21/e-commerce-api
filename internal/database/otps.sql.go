// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOtp = `-- name: CreateOtp :one
INSERT INTO otps (id ,  otp,user_id,exp_at, created_at , updated_at) 
VALUES ($1,$2,$3,$4 ,$5,$6)

RETURNING id, otp, user_id, exp_at, created_at, updated_at
`

type CreateOtpParams struct {
	ID        uuid.UUID
	Otp       string
	UserID    uuid.UUID
	ExpAt     time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, createOtp,
		arg.ID,
		arg.Otp,
		arg.UserID,
		arg.ExpAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Otp,
		&i.UserID,
		&i.ExpAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOtpByUserId = `-- name: GetOtpByUserId :one
SELECT id, otp, user_id, exp_at, created_at, updated_at FROM otps WHERE user_id = $1
`

func (q *Queries) GetOtpByUserId(ctx context.Context, userID uuid.UUID) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtpByUserId, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Otp,
		&i.UserID,
		&i.ExpAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
